apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: s3bucket.example.com
spec:
  compositeTypeRef:
    apiVersion: example.com/v1
    kind: XS3Bucket
  environment:
  mode: Pipeline
  pipeline:
    - functionRef:
        name: fn-hcl
      step: run hcl composition
      input:
        apiVersion: function-hcl/v1
        kind: HclInput
        debug: true
        source: Inline
        hcl: |+
          -- src/main.hcl --
          // top-level locals behave like Terraform locals and are available everywhere
          // and accessed just using their name (no need to put "local." in front of it like Terraform)
          locals {
            comp     = req.composite  // req.composite contains the composite resource

            // locals for commonly used things to reduce typing
            compName = comp.metadata.name
            params   = comp.spec.parameters
          }

          resource my-bucket {
            // a resource block (and indeed most other blocks) can have locals private to it.
            // These locals are not available outside this block
            locals {
              region = params.region // but this has access to locals in the outer scope
            }

            // body defines the output you want and can use expressions wherever
            body = {
              apiVersion : "s3.aws.upbound.io/v1beta1"
              kind : "Bucket"
              metadata : {
                name : "${compName}-bucket" // use the composite name in a template expression
              }
              spec : {
                forProvider : {
                  region : region // assigns to the region local
                }
              }
            }
          }





